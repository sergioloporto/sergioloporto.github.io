/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./header-animations */ "./src/js/header-animations.js");

__webpack_require__(/*! ./projects */ "./src/js/projects.js");

/***/ }),

/***/ "./src/js/header-animations.js":
/*!*************************************!*\
  !*** ./src/js/header-animations.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// NAVBAR
(function (d) {
  var mainMenu = d.getElementById('mainMenu'),
      items = mainMenu.getElementsByTagName('li'),
      current = mainMenu.getElementsByClassName('header__main-nav-menu--current')[0],
      lastElement = current,

  /* generate our highlight as DOM element */
  highlight = d.createElement('span');
  /* set our highlight position */

  function setHighlight(element) {
    highlight.style.top = element.offsetTop + 'px';
    highlight.style.left = element.offsetLeft + 'px';
    highlight.style.width = element.firstElementChild.clientWidth + 'px';
    highlight.style.height = element.firstElementChild.clientHeight + 'px';
    lastElement.classList.remove('over');
    lastElement = element;
    element.classList.add('over'); //
  }
  /* set initial position BEFORE attaching to DOM */


  setTimeout(function () {
    setHighlight(current);
  }, 500);
  /* attach it to the DOM before our menu LI */

  mainMenu.insertBefore(highlight, mainMenu.firstChild);
  /* our over/out events */

  function overLI(event) {
    setHighlight(event.currentTarget);
  }

  function outLI(event) {
    setHighlight(current);
  }
  /* now to add the events to all our LI */


  for (var i = 0, li; li = items[i]; i++) {
    li.addEventListener('mouseover', overLI, false);
    li.addEventListener('mouseout', outLI, false);
  }
  /* readjust it if the window is resized! */


  window.addEventListener('resize', function (e) {
    setHighlight(lastElement);
  }, false);
})(document); // END NAVBAR
//Menu not fixed for small screens


function navBarDisappear() {
  var navbar = document.querySelector('.header');
  var media = window.matchMedia("(max-width: 810px)");

  if (media.matches) {
    navbar.classList.remove('fixed');
  } else {
    navbar.classList.add('fixed');
  }
}

navBarDisappear();
window.addEventListener("orientationchange", navBarDisappear);
var time = setInterval(function () {
  window.addEventListener("resize", navBarDisappear);
}, 2000); //Myname animation
// get the element id

nameelement = document.getElementById("myname"); // reset the animation on mouse hover

nameelement.addEventListener("mouseover", function (myname) {
  myname.preventDefault;
  /* this condition enables continuous animation on each mouse hover.
  * if the changed class is already applied it gets replaced by the original one.
  * I could just remove, because it will be removed  by the way in the next line,
  * but since one day I may want to remove the if, for a 1-time hover animation,
  * I prefer to leave this additional line */

  if (nameelement.classList.contains("mynameanimation-changed") === true) {
    nameelement.classList.replace("mynameanimation-changed", "mynameanimation");
  } // remove the animation with slow delay (good only on page load)


  nameelement.classList.remove("mynameanimation");
  void nameelement.offsetWidth; // add the class with no delay (good for mouse )

  nameelement.classList.add("mynameanimation-changed");
}, false); //Navbar border

$(function () {
  var header = $(".header");
  $(window).scroll(function () {
    var scroll = $(window).scrollTop();

    if (scroll >= 50) {
      header.addClass("headershadow");
    } else {
      header.removeClass("headershadow");
    }
  });
}); //Skills

document.addEventListener("DOMContentLoaded", function () {
  var circleProgress = function circleProgress(selector) {
    var wrapper = document.querySelectorAll(selector);
    Array.prototype.forEach.call(wrapper, function (wrapper, i) {
      var wrapperWidth, wrapperHeight, percent, innerHTML, context, lineWidth, centerX, centerY, radius, newPercent, speed, from, to, duration, start, strokeStyle, text;

      var getValues = function getValues() {
        wrapperWidth = parseInt(window.getComputedStyle(wrapper).width);
        wrapperHeight = wrapperWidth;
        percent = wrapper.getAttribute('data-cp-percentage');
        innerHTML = '<span class="percentage"><strong>' + percent + '</strong> %</span><canvas class="circleProgressCanvas" width="' + wrapperWidth * 2 + '" height="' + wrapperHeight * 2 + '"></canvas>';
        wrapper.innerHTML = innerHTML;
        text = wrapper.querySelector(".percentage");
        canvas = wrapper.querySelector(".circleProgressCanvas");
        wrapper.style.height = canvas.style.width = canvas.style.height = wrapperWidth + "px";
        context = canvas.getContext('2d');
        centerX = canvas.width / 2;
        centerY = canvas.height / 2;
        newPercent = 0;
        speed = 1;
        from = 0;
        to = percent;
        duration = 1000;
        lineWidth = 25;
        radius = canvas.width / 2 - lineWidth;
        strokeStyle = wrapper.getAttribute('data-cp-color');
        start = new Date().getTime();
      };

      function animate() {
        requestAnimationFrame(animate);
        var time = new Date().getTime() - start;

        if (time <= duration) {
          var x = easeInOutQuart(time, from, to - from, duration);
          newPercent = x; // text.innerHTML = Math.round(newPercent) + " %";

          if (wrapper.classList.contains("html")) {
            text.innerHTML = '<img class="skill-icon html5" width="40%" height="40%" src="img/skills/html5.svg">';
          } else if (wrapper.classList.contains("js")) {
            text.innerHTML = '<img class="skill-icon js" width="35%" height="35%" src="img/skills/javascript.svg">';
          } else if (wrapper.classList.contains("wordpress")) {
            text.innerHTML = '<img class="skill-icon js" width="35%" height="35%" src="img/skills/wordpress.svg">';
          } else if (wrapper.classList.contains("css")) {
            text.innerHTML = '<img class="skill-icon css" width="40%" height="40%" src="img/skills/css3.svg">';
          } else if (wrapper.classList.contains("react")) {
            text.innerHTML = '<img class="skill-icon react" width="70%" height="70%" src="img/skills/react.svg">';
          } else {
            text.innerHTML = Math.round(newPercent) + " %";
          }

          drawArc();
        }
      }

      function drawArc() {
        var circleStart = 1.5 * Math.PI;
        var circleEnd = circleStart + newPercent / 50 * Math.PI;
        context.clearRect(0, 0, canvas.width, canvas.height);
        context.beginPath();
        context.arc(centerX, centerY, radius, circleStart, 4 * Math.PI, false);
        context.lineWidth = lineWidth;
        context.strokeStyle = "#f0f0f0";
        context.stroke();
        context.beginPath();
        context.arc(centerX, centerY, radius, circleStart, circleEnd, false);
        context.lineWidth = lineWidth;
        context.strokeStyle = strokeStyle;
        context.stroke();
      }

      var update = function update() {
        getValues();
        animate();
      };

      update();
      wrapper.addEventListener("click", function () {
        update();
      });
      var resizeTimer;
      window.addEventListener("resize", function () {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(function () {
          clearTimeout(resizeTimer);
          start = new Date().getTime();
          update();
        }, 250);
      });
    }); //
    // http://easings.net/#easeInOutQuart
    //  t: current time
    //  b: beginning value
    //  c: change in value
    //  d: duration
    //

    function easeInOutQuart(t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    }
  };

  circleProgress('.counter'); // Gibt eine Zufallszahl zwischen min (inklusive) und max (exklusive) zurück

  function getRandom(min, max) {
    return Math.random() * (max - min) + min;
  }
  /* other skills */


  var otherSkillsBtn = document.querySelector('.skills-cover button');
  var otherSkillsBox = document.querySelector('.skills-cover');
  var skillsCells = document.querySelectorAll('[class^=skill-]');

  for (i = 0; i < skillsCells.length; i++) {
    skillsCells[i].style.border = 'none';
  }

  if (otherSkillsBtn) {
    otherSkillsBtn.addEventListener('click', function () {
      for (i = 0; i < skillsCells.length; i++) {
        skillsCells[i].style.removeProperty('border');
      }

      otherSkillsBox.parentElement.removeChild(otherSkillsBox);
    });
  }
});

/***/ }),

/***/ "./src/js/projects.js":
/*!****************************!*\
  !*** ./src/js/projects.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var acc = document.getElementsByClassName("my-projects-buttons");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function () {
    this.classList.toggle("active");
    var panel = this.nextElementSibling.nextElementSibling;

    if (panel.classList.contains("panelhover") === true) {
      panel.classList.replace("panelhover", "panel");
    } else {
      // panel.style.display = "block";
      panel.classList.add("panelhover");
    }
  });
} //jQuery
// Change the plus/minus fontawesome icons on the projects


$("button.my-projects-buttons").click(ontop);

function ontop() {
  $(this).find("i.projectplus").toggleClass("icon-plus icon-minus");
} // for (i = 0; i < acc.length; i++) {
//     acc[i].addEventListener("click", function() {
//         this.classList.toggle("active");
//         var panel = this.nextElementSibling;
//         if (panel.style.display === "block") {
//             panel.style.display = "none";
//         } else {
//             panel.style.display = "block";
//         }
//     });
// }

/***/ })

/******/ });
//# sourceMappingURL=bundle.min.js.map